package com.example.samuraitravel.contoroller;


import javax.management.AttributeValueExp;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.ReviewEditForm;
import com.example.samuraitravel.form.ReviewRegisterForm;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReviewRepository;
import com.example.samuraitravel.security.UserDetailsImpl;
import com.example.samuraitravel.service.ReviewService;

@Controller
@RequestMapping("/houses/{houseId}/reviews")
public class ReviewController {
	private final ReviewRepository reviewRepository;
	private final HouseRepository houseRepository;
	private final ReviewService reviewService;


	public ReviewController (ReviewRepository reviewRepository, HouseRepository houseRepository, ReviewService reviewService) {
		this.reviewRepository = reviewRepository;
		this.houseRepository = houseRepository;
		this.reviewService = reviewService;
	}

	@GetMapping
	public String index(@PathVariable(name = "houseId")  Integer houseId, @PageableDefault(page = 0, size = 10, sort = "id") Pageable pageable, Model model){
		House house = houseRepository.getReferenceById(houseId);
		Page<Review> reviewPage = reviewRepository.findByHouseOrderByCreatedAtDesc(house, pageable);
		
		model.addAttribute(attributeName:"house", house);
		model.addAttribute(attributeName:"reviewPage", reviewPage());
			
		return "reviews/index";
	}
	
	@GetMapping("/register")
	public String register(@PathVariable(name = "houseId") Integer houseId, Model model) {
		House house = houseRepository.getReferenceById(houseId);
		
		model.addAttribute(attributeName:"house", house);
		model.addAttribute(attributeName:"reviewRegisterForm", new ReviewRegisterForm());
		
		return "reviews/register";
	}
	@PostMapping("/create")
	public String create(@PathVariable(name = "houseId") Integer houseId,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			@ModelAttribute @Validated ReviewRegisterForm reviewRegisterForm,
			BindingResult bindingResult,
			RedirectAttributes redirectAttributes,
			Model model)
	
	House house = houseRepository.getReferenceById(houseId);
	User user = userDetailsImpl.getUser();
	
	if (bindingResult.hasErrors()) {
		model.addAttribute("house", house);
		return "reviews/register";
	}
	
	reviewService.create(house, user, reviewRegisterForm);
	redirectAttributes.addFlashAttribute(attributeName:"successMessage", attributeValue:"レビューを投稿しました。");
	
	return "reviews/edit";
	}

	@PostMapping("/{reviewId}/update")
	public String update(@PathVariable(name = "houseId")Integer houseId,
						 @PathVariable(name = "reviewId") Integer reviewId,
						 @ModelAttribute @Validated ReviewEditForm reviewEditForm,
						 BindingResult bindingResult,
						 RedirectAttributes redirectAttributes,
						 Model model)
	{
		House house = houseRepository.getReferenceById(houseId);
		Review review = reviewRepository.getReferenceById(reviewId);
		
		if (bindingResult.hasErrors()) {
			model.addAttribute(attributeName:"house", house);
			model.addAttribute(attributeName:"review", review);
			return "reviews/edit";
	}
	
		reviewService.update(reviewEditForm);
		redirectAttributes.addFlashAttribute(attributeName:"successMessage", attributeValue:"レビューを編集しました。");
		
		return "redirect:/houses/{houseId}";
	}
	
	@PostMapping("/{reviewId}/delete")
	public String delete(@PathVariable(name = "reviewId") Integer reviewId, RedirectAttrivutes redirectAttributes) {
		reviewRepository.deleteById(reviewId);
		
		redirectAttributes.addFlashAttribute(attributeName:"successMessage", attributeValue:"レビューを削除しました。");
		
		return "redirect:/houses/{houseId}";
	}
	}